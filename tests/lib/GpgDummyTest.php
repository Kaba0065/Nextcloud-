<?php
/**
 * @copyright Copyright (c) 2018 Arne Hamann <kontakt+github@arne.email>
 *
 * @author Arne Hamann <kontakt+github@arne.email>
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

namespace Test\lib;

use OC\GpgDummy;
use Test\TestCase;




class GpgTest extends TestCase {
	/** @var IGpg|\PHPUnit_Framework_MockObject_MockObject*/
	private $gpg;

	//Test Keys to use later
	private $testKeys = [
		['name' => 'testUser',
			'email' => 'test@invalid',
			'passphrase' => '',
			'fingerprint' => 'D666159BED6F87256D9B943493E0B4B0FDF4B630',
			'privkey' => '-----BEGIN PGP PRIVATE KEY BLOCK-----

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
6qdrXiggUVyxqmZDGXc=
=uNVT
-----END PGP PRIVATE KEY BLOCK-----
',
			'pubkey' => '-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=w1AY
-----END PGP PUBLIC KEY BLOCK-----
'],
		['name' => 'Werner',
			'email' => 'werner@test.invalid',
			'passphrase' => '1',
			'fingerprint' => 'FF4B0A93EA76774A35E1C178ABE2EB2749BF04D6',
			'privkey' => '-----BEGIN PGP PRIVATE KEY BLOCK-----

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
t1zj/dQtIybcPQPy/gDs
=UztI
-----END PGP PRIVATE KEY BLOCK-----
',
			'pubkey' => '-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=QEhc
-----END PGP PUBLIC KEY BLOCK-----
'],
		['name' => 'Kalle',
			'email' => 'kalle@test.invalid',
			'email1' => 'onemoreemail@test.invalid',
			'email2' => 'second@test.invalid',
			'passphrase' => '',
			'fingerprint' => 'A3FDD816C242F580F18CBB9ECDF73E688E900937',
			'privkey' => '-----BEGIN PGP PRIVATE KEY BLOCK-----

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
=Q2uv
-----END PGP PRIVATE KEY BLOCK-----
',
			'pubkey' => '-----BEGIN PGP PUBLIC KEY BLOCK-----

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
8TSgKnOs
=dtSH
-----END PGP PUBLIC KEY BLOCK-----
']
	];



	protected function setUp() {
		parent::setUp();


		$this->gpg = new GpgDummy();
	}


	/**
	 * @dataProvider dataEncrypt
	 *
	 */
	public function testEncrypt($uid) {
		$plaintext = "This is a test Text";

		if ($uid === "without") {
			$text = $this->gpg->encrypt([], $plaintext);
		} else {
			$text = $this->gpg->encrypt([], $plaintext, $uid);
		}

		$this->assertEquals($plaintext, $text);
	}

	public function dataEncrypt(){
		return [
			[null, ],
			['without'],
			['testuser' ]
		];
	}

	/**
	 * @dataProvider dataEncryptsign
	 *
	 * @param string $plaintext
	 * @param array $encrypt_fingerprints fingerprints of the encryption keys
	 * @param array $sign_fingerprints fingerprints of the sign keys
	 * @param $uid = null
	 */
	public function testEncryptsign(array $encrypt_fingerprints, array $sign_fingerprints, $uid) {
		$plaintext = "This is a test Text";

		if ($uid === "without") {
			$text = $this->gpg->encryptsign( $encrypt_fingerprints, $sign_fingerprints, $plaintext);
		} else {
			$text = $this->gpg->encryptsign( $encrypt_fingerprints, $sign_fingerprints, $plaintext, $uid);
		}

		$this->assertEquals($plaintext, $text);
	}

	public function dataEncryptsign(){
		return [
			[[$this->testKeys[0]['fingerprint']], [$this->testKeys[2]['fingerprint']], null, 1321],
			[[$this->testKeys[0]['fingerprint']], [$this->testKeys[2]['fingerprint']], 'without', 1321],
			[[$this->testKeys[0]['fingerprint']], [$this->testKeys[2]['fingerprint']], 'testuser', 1321],
			[[$this->testKeys[0]['fingerprint'], $this->testKeys[1]['fingerprint']], [$this->testKeys[2]['fingerprint']], null, 1861],
			"with passphrase" =>[[$this->testKeys[0]['fingerprint'], $this->testKeys[1]['fingerprint']], [$this->testKeys[2]['fingerprint'],$this->testKeys[1]['fingerprint']=>$this->testKeys[1]['passphrase']], 'testuser', 2466],
		];
	}

	/**
	 * @dataProvider dataSign
	 *
	 */
	public function testSign($uid) {
		$plaintext = "This is a test Text";

		if ($uid === "without") {
			$text = $this->gpg->sign([], $plaintext);
		} else {
			$text = $this->gpg->sign([], $plaintext, $uid);
		}

		$this->assertEquals($plaintext, $text);
	}

	public function dataSign(){
		return [
			[null ],
			['without'],
			['testuser' ]
		];
	}

	/**
	 * @dataProvider dataSignWithPassphrase
	 *
	 */
	public function testSignWithPassphrase($uid) {
		$plaintext = "This is a test Text";
		if ($uid === "without") {
			$this->gpg->import($this->testKeys[1]['privkey']);
			$text = $this->gpg->sign([$this->testKeys[1]['fingerprint'] => $this->testKeys[1]['passphrase']],$plaintext);
		} else {

			$this->gpg->import($this->testKeys[1]['privkey'],$uid);
			$text = $this->gpg->sign([$this->testKeys[1]['fingerprint'] => $this->testKeys[1]['passphrase']],$plaintext, $uid);
		}
		$this->assertEquals($plaintext, $text);
	}

	public function dataSignWithPassphrase(){
		return [
			[null ],
			['without'],
			['testuser' ]
		];
	}

	/**
	 * @dataProvider dataImport
	 *
	 *
	 * @param string|null $uid
	 */
	public function testImport( $testKey, $uid , $r ) {
		if ($uid === 'without'){
			$result = $this->gpg->import($testKey);
		} else {
			$result = $this->gpg->import($testKey, $uid);
		}

		foreach($r as $key => $value){
			$this->assertEquals($value,$result[$key]);
		}
	}

	public function dataImport(){
		$testKeyResult = [
			'imported' => 0,
			'unchanged' => 0,
			'secretimported' => 0,
			'skippedkeys' => 0,
			'fingerprint' => ''
		];
		$error_result = [
			'imported' => 0,
			'unchanged' => 0,
			'secretimported' => 0,
			'skippedkeys' => 0,
		];
		$testSecretWithoutPassphraseKeyResult = [
			'imported' => 0,
			'unchanged' => 0,
			'secretimported' => 0,
			'skippedkeys' => 0,
			'fingerprint' => ''
		];
		$testSecretWithPassphraseKeyResult = [
			'imported' => 0,
			'unchanged' => 0,
			'secretimported' => 0,
			'skippedkeys' => 0,
			'fingerprint' => ''
		];
		return [
			[$this->testKeys[0]['pubkey'], null, $testKeyResult],
			[$this->testKeys[0]['pubkey'], 'without', $testKeyResult],
			[$this->testKeys[0]['pubkey'], 'testuser', $testKeyResult],
			["Secret import test without passphrase" => $this->testKeys[0]['privkey'], 'testuser', $testSecretWithoutPassphraseKeyResult],
			["Secret import test with passphrase" => $this->testKeys[1]['privkey'], 'testuser', $testSecretWithPassphraseKeyResult],
			["", null, $error_result],
			["This should be an Error", null, $error_result]
		];
	}

	/**
	 * @dataProvider dataExport
	 *
	 * @param string|null $uid
	 */
	public function testExport( $uid  ) {
		$testKey = "";
		$testKeyResult = [
			'imported' => 0,
			'unchanged' => 0,
			'secretimported' => 0,
			'skippedkeys' => 0,
			'fingerprint' => $this->testKeys[0]['fingerprint']
		];

		if ($uid === 'without'){
			$key = $this->gpg->export($testKeyResult['fingerprint']);
		} else {
			$key = $this->gpg->export($testKeyResult['fingerprint'], $uid);
		}

		//$this->assertEquals(strlen($testKey),strlen($key));
		$this->assertEquals($key, "");

	}

	public function dataExport(){
		return [
			[null],
			['without'],
			['testuser']
		];
	}


	/**
	 * @dataProvider dataKeyinfo
	 *
	 * @param array $keys
	 * @param string $pattern
	 * @param string|null $uid
	 */
	public function testKeyinfo($keys, $pattern , $uid) {
		if ($uid === 'without'){
			foreach($keys as $key){
				$this->gpg->import($key);
			}
			$r = $this->gpg->keyinfo($pattern);
		} else {
			foreach($keys as $key){
				$this->gpg->import($key, $uid);
			}
			$r = $this->gpg->keyinfo($pattern,$uid);
		}


		$this->assertEquals([], $r);

	}

	public function dataKeyinfo(){
		return [
			[[], "", null, []],
			[[], "", 'testuser', []],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey']], "Werner", null],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey']], "Werner", 'without'],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey']], "Werner", 'testuser'],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey']], "", null],
		];
	}

	/**
	 * @dataProvider dataDelete
	 *
	 * @param string|null $uid
	 */
	public function testDelete( $uid  ) {
		if ($uid === 'without') {
			$this->assertTrue($this->gpg->deletekey("asfdhjasdkjasdfkkaas"));
		} else {
			$this->assertTrue($this->gpg->deletekey("asfdhjasdkjasdfkkaas", $uid));
		}
	}

	public function dataDelete(){
		return [
			[null ],
			['without'],
			['testuser' ]
		];
	}

	/**
	 * @dataProvider dataGetPublicKeyFromEmail
	 *
	 * @param array $keys
	 * @param string $email
	 * @param string|null $uid
	 * @param string $expectFingerprint
	 */
	public function testGetPublicKeyFromEmail($keys, $email, $uid) {
		if ($uid === 'without') {
			foreach ($keys as $key){
				$this->gpg->import($key);
			}
			$fingerprint = $this->gpg->getPublicKeyFromEmail($email);

		} else {
			foreach ($keys as $key){
				$this->gpg->import($key, $uid);
			}
			$fingerprint = $this->gpg->getPublicKeyFromEmail($email,$uid);
		}
		$this->assertEquals("",$fingerprint);

	}

	public function dataGetPublicKeyFromEmail(){
		return [
			[[], "", null, ''],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey'],$this->testKeys[2]['pubkey']], $this->testKeys[0]['email'], null],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey'],$this->testKeys[2]['pubkey']], $this->testKeys[0]['email'], 'without'],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey'],$this->testKeys[2]['pubkey']], $this->testKeys[0]['email'], 'testuser'],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey'],$this->testKeys[2]['pubkey']], $this->testKeys[2]['email2'], null],
			[[$this->testKeys[0]['pubkey'],$this->testKeys[1]['pubkey'],$this->testKeys[2]['pubkey']], $this->testKeys[2]['email1'], null],
		];
	}
	

	/**
	 * @dataProvider dataGenerateKey
	 *
	 * @param string $email
	 * @param string $name
	 * @param string comment
	 * @param string|null $uid
	 */
	public function testGenerateKey($email, $name, $comment, $uid ) {

		$fingerprint = $this->gpg->generateKey($email,$name,$comment,$uid);

		$this->assertEquals("",$fingerprint);

	}

	public function dataGenerateKey(){
		return [
			"default Key generate" => ["","","",null],
			"don't get serverkey as User" => ["","","","testuser"],
			"user Key generate" => ["testuser@bla.invalid", "peter invalid", "phpUnit Test", "testuser"]
		];
	}


}