{"version":3,"file":"vendors-node_modules_floating-ui_dom_dist_floating-ui_dom_esm_js-vendors-node_modules_floating-ui_dom_dist_floating-ui_dom_esm_js.js?v=7b841f40f2b4b34dad6a","mappings":"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","sources":["webpack:///nextcloud/node_modules/@floating-ui/dom/dist/floating-ui.dom.esm.js"],"sourcesContent":["import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { autoUpdate, computePosition, platform };\n"],"names":["getCssDimensions","element","css","width","parseFloat","height","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","contextElement","getScale","domElement","rect","getBoundingClientRect","x","y","Number","isFinite","noOffsets","getVisualOffsets","win","visualViewport","offsetLeft","offsetTop","includeScale","isFixedStrategy","offsetParent","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","left","top","offsetWin","currentIFrame","frameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","scrollLeft","getClientRectFromClippingAncestor","clippingAncestor","strategy","html","clientWidth","clientHeight","visualViewportBased","getViewportRect","scroll","body","ownerDocument","scrollWidth","scrollHeight","scrollTop","direction","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","parentNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","documentElement","offsets","offsetRect","getTrueOffsetParent","polyfill","getOffsetParent","window","platform","convertOffsetParentRelativeRectToViewportRelativeRect","_ref","getDocumentElement","getClippingRect","boundary","rootBoundary","clippingAncestors","cache","cachedResult","get","result","filter","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","computedStyle","currentNodeIsContaining","includes","ancestor","set","getClippingElementAncestors","this","_c","concat","firstClippingAncestor","clippingRect","reduce","accRect","right","bottom","getElementRects","async","reference","floating","getOffsetParentFn","getDimensionsFn","getDimensions","getClientRects","Array","from","isElement","isRTL","autoUpdate","update","options","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","root","cleanup","clearTimeout","disconnect","refresh","skip","threshold","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","e","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","prevRefRect","frameLoop","nextRefRect","removeEventListener","computePosition","Map","mergedOptions","platformWithCache"],"sourceRoot":""}