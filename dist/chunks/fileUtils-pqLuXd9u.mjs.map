{"version":3,"file":"fileUtils-pqLuXd9u.mjs","sources":["../../apps/files/src/utils/fileUtils.ts"],"sourcesContent":["/**\n * @copyright Copyright (c) 2021 John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @author John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nimport { FileType, type Node } from '@nextcloud/files'\nimport { translate as t, translatePlural as n } from '@nextcloud/l10n'\nimport { basename, extname } from 'path'\n\n// TODO: move to @nextcloud/files\n/**\n * Create an unique file name\n * @param name The initial name to use\n * @param otherNames Other names that are already used\n * @param suffix A function that takes an index an returns a suffix to add, defaults to '(index)'\n * @return Either the initial name, if unique, or the name with the suffix so that the name is unique\n */\nexport const getUniqueName = (name: string, otherNames: string[], suffix = (n: number) => `(${n})`): string => {\n\tlet newName = name\n\tlet i = 1\n\twhile (otherNames.includes(newName)) {\n\t\tconst ext = extname(name)\n\t\tnewName = `${basename(name, ext)} ${suffix(i++)}${ext}`\n\t}\n\treturn newName\n}\n\nexport const encodeFilePath = function(path) {\n\tconst pathSections = (path.startsWith('/') ? path : `/${path}`).split('/')\n\tlet relativePath = ''\n\tpathSections.forEach((section) => {\n\t\tif (section !== '') {\n\t\t\trelativePath += '/' + encodeURIComponent(section)\n\t\t}\n\t})\n\treturn relativePath\n}\n\n/**\n * Extract dir and name from file path\n *\n * @param {string} path the full path\n * @return {string[]} [dirPath, fileName]\n */\nexport const extractFilePaths = function(path) {\n\tconst pathSections = path.split('/')\n\tconst fileName = pathSections[pathSections.length - 1]\n\tconst dirPath = pathSections.slice(0, pathSections.length - 1).join('/')\n\treturn [dirPath, fileName]\n}\n\n/**\n * Generate a translated summary of an array of nodes\n * @param {Node[]} nodes the nodes to summarize\n * @return {string}\n */\nexport const getSummaryFor = (nodes: Node[]): string => {\n\tconst fileCount = nodes.filter(node => node.type === FileType.File).length\n\tconst folderCount = nodes.filter(node => node.type === FileType.Folder).length\n\n\tif (fileCount === 0) {\n\t\treturn n('files', '{folderCount} folder', '{folderCount} folders', folderCount, { folderCount })\n\t} else if (folderCount === 0) {\n\t\treturn n('files', '{fileCount} file', '{fileCount} files', fileCount, { fileCount })\n\t}\n\n\tif (fileCount === 1) {\n\t\treturn n('files', '1 file and {folderCount} folder', '1 file and {folderCount} folders', folderCount, { folderCount })\n\t}\n\n\tif (folderCount === 1) {\n\t\treturn n('files', '{fileCount} file and 1 folder', '{fileCount} files and 1 folder', fileCount, { fileCount })\n\t}\n\n\treturn t('files', '{fileCount} files and {folderCount} folders', { fileCount, folderCount })\n}\n"],"names":["getUniqueName","name","otherNames","suffix","n","newName","i","ext","extname","encodeFilePath","path","pathSections","relativePath","section","getSummaryFor","nodes","fileCount","node","FileType","folderCount","t"],"mappings":";kIAiCa,MAAAA,EAAgB,CAACC,EAAcC,EAAsBC,EAAUC,GAAc,IAAI,OAAAA,EAAC,GAAgB,IAAA,CAC9G,IAAIC,EAAUJ,EACVK,EAAI,EACD,KAAAJ,EAAW,SAASG,CAAO,GAAG,CAC9B,MAAAE,EAAMC,UAAQP,CAAI,EACdI,EAAA,GAAG,kBAASJ,EAAMM,CAAG,EAAC,GAAI,EAAA,OAAAJ,EAAOG,GAAG,CAAI,EAAA,OAAAC,CAAA,CACnD,CACO,OAAAF,CACR,EAEaI,EAAiB,SAASC,EAAM,CACtC,MAAAC,GAAgBD,EAAK,WAAW,GAAG,EAAIA,EAAO,IAAI,OAAQA,CAAA,GAAA,MAAM,GAAG,EACzE,IAAIE,EAAe,GACN,OAAAD,EAAA,QAASE,GAAY,CAC7BA,IAAY,KACCD,GAAA,IAAM,mBAAmBC,CAAO,EACjD,CACA,EACMD,CACR,EAoBaE,EAAiBC,GAA0B,CACjD,MAAAC,EAAYD,EAAM,OAAOE,GAAQA,EAAK,OAASC,EAAS,IAAI,EAAE,OAC9DC,EAAcJ,EAAM,OAAOE,GAAQA,EAAK,OAASC,EAAS,MAAM,EAAE,OAExE,OAAIF,IAAc,EACVZ,EAAE,QAAS,uBAAwB,wBAAyBe,EAAa,CAAE,YAAAA,EAAa,EACrFA,IAAgB,EACnBf,EAAE,QAAS,mBAAoB,oBAAqBY,EAAW,CAAE,UAAAA,EAAW,EAGhFA,IAAc,EACVZ,EAAE,QAAS,kCAAmC,mCAAoCe,EAAa,CAAE,YAAAA,EAAa,EAGlHA,IAAgB,EACZf,EAAE,QAAS,gCAAiC,iCAAkCY,EAAW,CAAE,UAAAA,EAAW,EAGvGI,EAAE,QAAS,8CAA+C,CAAE,UAAAJ,EAAW,YAAAG,EAAa,CAC5F"}